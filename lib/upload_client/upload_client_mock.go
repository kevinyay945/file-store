// Code generated by MockGen. DO NOT EDIT.
// Source: my-imgur/lib/upload_client (interfaces: IClient)

// Package upload_client is a generated GoMock package.
package upload_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// CheckAuthorization mocks base method.
func (m *MockIClient) CheckAuthorization() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorization")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorization indicates an expected call of CheckAuthorization.
func (mr *MockIClientMockRecorder) CheckAuthorization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorization", reflect.TypeOf((*MockIClient)(nil).CheckAuthorization))
}

// GetFileLink mocks base method.
func (m *MockIClient) GetFileLink(arg0 AllowUploadLocation, arg1 string, arg2, arg3, arg4 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileLink", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileLink indicates an expected call of GetFileLink.
func (mr *MockIClientMockRecorder) GetFileLink(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileLink", reflect.TypeOf((*MockIClient)(nil).GetFileLink), arg0, arg1, arg2, arg3, arg4)
}

// GetFilePublicLink mocks base method.
func (m *MockIClient) GetFilePublicLink(arg0 string, arg1 int) (GetFilePublicLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilePublicLink", arg0, arg1)
	ret0, _ := ret[0].(GetFilePublicLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilePublicLink indicates an expected call of GetFilePublicLink.
func (mr *MockIClientMockRecorder) GetFilePublicLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilePublicLink", reflect.TypeOf((*MockIClient)(nil).GetFilePublicLink), arg0, arg1)
}

// GetPublicThumbnail mocks base method.
func (m *MockIClient) GetPublicThumbnail(arg0 string, arg1, arg2, arg3 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicThumbnail", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicThumbnail indicates an expected call of GetPublicThumbnail.
func (mr *MockIClientMockRecorder) GetPublicThumbnail(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicThumbnail", reflect.TypeOf((*MockIClient)(nil).GetPublicThumbnail), arg0, arg1, arg2, arg3)
}

// SetAccessToken mocks base method.
func (m *MockIClient) SetAccessToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccessToken", arg0)
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockIClientMockRecorder) SetAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockIClient)(nil).SetAccessToken), arg0)
}

// UploadFile mocks base method.
func (m *MockIClient) UploadFile(arg0 AllowUploadLocation, arg1 string, arg2 []byte, arg3 UploadFileOption) (UploadFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(UploadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockIClientMockRecorder) UploadFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockIClient)(nil).UploadFile), arg0, arg1, arg2, arg3)
}
